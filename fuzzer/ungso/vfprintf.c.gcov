        -:    0:Source:vfprintf.c
        -:    0:Graph:vfprintf.gcno
        -:    0:Data:vfprintf.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// #include "stdio_impl.h"
        -:    2:
        -:    3:#include <errno.h>
        -:    4:#include <ctype.h>
        -:    5:#include <limits.h>
        -:    6:#include <string.h>
        -:    7:#include <stdlib.h>
        -:    8:#include <stdarg.h>
        -:    9:#include <wchar.h>
        -:   10:#include <inttypes.h>
        -:   11:#include <math.h>
        -:   12:#include <float.h>
        -:   13:
        -:   14:#include "musl.h"
        -:   15:
        -:   16:/* Some useful macros */
        -:   17:
        -:   18:#define MAX(a,b) ((a)>(b) ? (a) : (b))
        -:   19:#define MIN(a,b) ((a)<(b) ? (a) : (b))
        -:   20:#define CONCAT2(x,y) x ## y
        -:   21:#define CONCAT(x,y) CONCAT2(x,y)
        -:   22:
        -:   23:/* Convenient bit representation for modifier flags, which all fall
        -:   24: * within 31 codepoints of the space character. */
        -:   25:
        -:   26:#define ALT_FORM   (1U<<'#'-' ')
        -:   27:#define ZERO_PAD   (1U<<'0'-' ')
        -:   28:#define LEFT_ADJ   (1U<<'-'-' ')
        -:   29:#define PAD_POS    (1U<<' '-' ')
        -:   30:#define MARK_POS   (1U<<'+'-' ')
        -:   31:#define GROUPED    (1U<<'\''-' ')
        -:   32:
        -:   33:#define FLAGMASK (ALT_FORM|ZERO_PAD|LEFT_ADJ|PAD_POS|MARK_POS|GROUPED)
        -:   34:
        -:   35:#if UINT_MAX == ULONG_MAX
        -:   36:#define LONG_IS_INT
        -:   37:#endif
        -:   38:
        -:   39:#if SIZE_MAX != ULONG_MAX || UINTMAX_MAX != ULLONG_MAX
        -:   40:#define ODD_TYPES
        -:   41:#endif
        -:   42:
        -:   43:/* State machine to accept length modifiers + conversion specifiers.
        -:   44: * Result is 0 on failure, or an argument type to pop on success. */
        -:   45:
        -:   46:enum {
        -:   47:	BARE, LPRE, LLPRE, HPRE, HHPRE, BIGLPRE,
        -:   48:	ZTPRE, JPRE,
        -:   49:	STOP,
        -:   50:	PTR, INT, UINT, ULLONG,
        -:   51:#ifndef LONG_IS_INT
        -:   52:	LONG, ULONG,
        -:   53:#else
        -:   54:#define LONG INT
        -:   55:#define ULONG UINT
        -:   56:#endif
        -:   57:	SHORT, USHORT, CHAR, UCHAR,
        -:   58:#ifdef ODD_TYPES
        -:   59:	LLONG, SIZET, IMAX, UMAX, PDIFF, UIPTR,
        -:   60:#else
        -:   61:#define LLONG ULLONG
        -:   62:#define SIZET ULONG
        -:   63:#define IMAX LLONG
        -:   64:#define UMAX ULLONG
        -:   65:#define PDIFF LONG
        -:   66:#define UIPTR ULONG
        -:   67:#endif
        -:   68:	DBL, LDBL,
        -:   69:	NOARG,
        -:   70:	MAXSTATE
        -:   71:};
        -:   72:
        -:   73:#define S(x) [(x)-'A']
        -:   74:
        -:   75:static const unsigned char states[]['z'-'A'+1] = {
        -:   76:	{ /* 0: bare types */
        -:   77:		S('d') = INT, S('i') = INT,
        -:   78:		S('o') = UINT, S('u') = UINT, S('x') = UINT, S('X') = UINT,
        -:   79:		S('e') = DBL, S('f') = DBL, S('g') = DBL, S('a') = DBL,
        -:   80:		S('E') = DBL, S('F') = DBL, S('G') = DBL, S('A') = DBL,
        -:   81:		S('c') = CHAR, S('C') = INT,
        -:   82:		S('s') = PTR, S('S') = PTR, S('p') = UIPTR, S('n') = PTR,
        -:   83:		S('m') = NOARG,
        -:   84:		S('l') = LPRE, S('h') = HPRE, S('L') = BIGLPRE,
        -:   85:		S('z') = ZTPRE, S('j') = JPRE, S('t') = ZTPRE,
        -:   86:	}, { /* 1: l-prefixed */
        -:   87:		S('d') = LONG, S('i') = LONG,
        -:   88:		S('o') = ULONG, S('u') = ULONG, S('x') = ULONG, S('X') = ULONG,
        -:   89:		S('e') = DBL, S('f') = DBL, S('g') = DBL, S('a') = DBL,
        -:   90:		S('E') = DBL, S('F') = DBL, S('G') = DBL, S('A') = DBL,
        -:   91:		S('c') = INT, S('s') = PTR, S('n') = PTR,
        -:   92:		S('l') = LLPRE,
        -:   93:	}, { /* 2: ll-prefixed */
        -:   94:		S('d') = LLONG, S('i') = LLONG,
        -:   95:		S('o') = ULLONG, S('u') = ULLONG,
        -:   96:		S('x') = ULLONG, S('X') = ULLONG,
        -:   97:		S('n') = PTR,
        -:   98:	}, { /* 3: h-prefixed */
        -:   99:		S('d') = SHORT, S('i') = SHORT,
        -:  100:		S('o') = USHORT, S('u') = USHORT,
        -:  101:		S('x') = USHORT, S('X') = USHORT,
        -:  102:		S('n') = PTR,
        -:  103:		S('h') = HHPRE,
        -:  104:	}, { /* 4: hh-prefixed */
        -:  105:		S('d') = CHAR, S('i') = CHAR,
        -:  106:		S('o') = UCHAR, S('u') = UCHAR,
        -:  107:		S('x') = UCHAR, S('X') = UCHAR,
        -:  108:		S('n') = PTR,
        -:  109:	}, { /* 5: L-prefixed */
        -:  110:		S('e') = LDBL, S('f') = LDBL, S('g') = LDBL, S('a') = LDBL,
        -:  111:		S('E') = LDBL, S('F') = LDBL, S('G') = LDBL, S('A') = LDBL,
        -:  112:		S('n') = PTR,
        -:  113:	}, { /* 6: z- or t-prefixed (assumed to be same size) */
        -:  114:		S('d') = PDIFF, S('i') = PDIFF,
        -:  115:		S('o') = SIZET, S('u') = SIZET,
        -:  116:		S('x') = SIZET, S('X') = SIZET,
        -:  117:		S('n') = PTR,
        -:  118:	}, { /* 7: j-prefixed */
        -:  119:		S('d') = IMAX, S('i') = IMAX,
        -:  120:		S('o') = UMAX, S('u') = UMAX,
        -:  121:		S('x') = UMAX, S('X') = UMAX,
        -:  122:		S('n') = PTR,
        -:  123:	}
        -:  124:};
        -:  125:
        -:  126:#define OOB(x) ((unsigned)(x)-'A' > 'z'-'A')
        -:  127:
        -:  128:union arg
        -:  129:{
        -:  130:	uintmax_t i;
        -:  131:	long double f;
        -:  132:	void *p;
        -:  133:};
        -:  134:
     1500:  135:static void pop_arg(union arg *arg, int type, va_list *ap)
        -:  136:{
        -:  137:	/* Give the compiler a hint for optimizing the switch. */
     3000:  138:	if ((unsigned)type > MAXSTATE) return;
     1500:  139:	switch (type) {
      200:  140:	       case PTR:	arg->p = va_arg(*ap, void *);
      200:  141:	break; case INT:	arg->i = va_arg(*ap, int);
       78:  142:	break; case UINT:	arg->i = va_arg(*ap, unsigned int);
        -:  143:#ifndef LONG_IS_INT
       99:  144:	break; case LONG:	arg->i = va_arg(*ap, long);
       39:  145:	break; case ULONG:	arg->i = va_arg(*ap, unsigned long);
        -:  146:#endif
      209:  147:	break; case ULLONG:	arg->i = va_arg(*ap, unsigned long long);
    #####:  148:	break; case SHORT:	arg->i = (short)va_arg(*ap, int);
       33:  149:	break; case USHORT:	arg->i = (unsigned short)va_arg(*ap, int);
       92:  150:	break; case CHAR:	arg->i = (signed char)va_arg(*ap, int);
       50:  151:	break; case UCHAR:	arg->i = (unsigned char)va_arg(*ap, int);
        -:  152:#ifdef ODD_TYPES
        -:  153:	break; case LLONG:	arg->i = va_arg(*ap, long long);
        -:  154:	break; case SIZET:	arg->i = va_arg(*ap, size_t);
        -:  155:	break; case IMAX:	arg->i = va_arg(*ap, intmax_t);
        -:  156:	break; case UMAX:	arg->i = va_arg(*ap, uintmax_t);
        -:  157:	break; case PDIFF:	arg->i = va_arg(*ap, ptrdiff_t);
        -:  158:	break; case UIPTR:	arg->i = (uintptr_t)va_arg(*ap, void *);
        -:  159:#endif
    #####:  160:	break; case DBL:	arg->f = va_arg(*ap, double);
      341:  161:	break; case LDBL:	arg->f = va_arg(*ap, long double);
        -:  162:	}
        -:  163:}
        -:  164:
   590707:  165:static void out(MUSL_FILE *f, const char *s, size_t l)
        -:  166:{
   590707:  167:	__fwritex((void *)s, l, f);
   590707:  168:}
        -:  169:
     5194:  170:static void pad(MUSL_FILE *f, char c, int w, int l, int fl)
        -:  171:{
        -:  172:	char pad[256];
    10388:  173:	if (fl & (LEFT_ADJ | ZERO_PAD) || l >= w) return;
     1655:  174:	l = w - l;
     1655:  175:	memset(pad, c, l>sizeof pad ? sizeof pad : l);
   583352:  176:	for (; l >= sizeof pad; l -= sizeof pad)
   581697:  177:		out(f, pad, sizeof pad);
     1655:  178:	out(f, pad, l);
        -:  179:}
        -:  180:
        -:  181:static const char xdigits[16] = {
        -:  182:	"0123456789ABCDEF"
        -:  183:};
        -:  184:
      200:  185:static char *fmt_x(uintmax_t x, char *s, int lower)
        -:  186:{
      200:  187:	for (; x; x>>=4) *--s = xdigits[(x&15)]|lower;
      200:  188:	return s;
        -:  189:}
        -:  190:
      100:  191:static char *fmt_o(uintmax_t x, char *s)
        -:  192:{
      100:  193:	for (; x; x>>=3) *--s = '0' + (x&7);
      100:  194:	return s;
        -:  195:}
        -:  196:
     3258:  197:static char *fmt_u(uintmax_t x, char *s)
        -:  198:{
        -:  199:	unsigned long y;
     3258:  200:	for (   ; x>ULONG_MAX; x/=10) *--s = '0' + x%10;
     3258:  201:	for (y=x;           y; y/=10) *--s = '0' + y%10;
     3258:  202:	return s;
        -:  203:}
        -:  204:
        -:  205:/* Do not override this check. The floating point printing code below
        -:  206: * depends on the float.h constants being right. If they are wrong, it
        -:  207: * may overflow the stack. */
        -:  208:#if LDBL_MANT_DIG == 53
        -:  209:typedef char compiler_defines_long_double_incorrectly[9-(int)sizeof(long double)];
        -:  210:#endif
        -:  211:
      700:  212:static int fmt_fp(MUSL_FILE *f, long double y, int w, int p, int fl, int t)
        -:  213:{
        -:  214:	uint32_t big[(LDBL_MANT_DIG+28)/29 + 1          // mantissa expansion
        -:  215:		+ (LDBL_MAX_EXP+LDBL_MANT_DIG+28+8)/9]; // exponent expansion
        -:  216:	uint32_t *a, *d, *r, *z;
      700:  217:	int e2=0, e, i, j, l;
        -:  218:	char buf[9+LDBL_MANT_DIG/4], *s;
      700:  219:	const char *prefix="-0X+0X 0X-0x+0x 0x";
        -:  220:	int pl;
      700:  221:	char ebuf0[3*sizeof(int)], *ebuf=&ebuf0[3*sizeof(int)], *estr;
        -:  222:
      700:  223:	pl=1;
      700:  224:	if (signbit(y)) {
    #####:  225:		y=-y;
      700:  226:	} else if (fl & MARK_POS) {
      112:  227:		prefix+=3;
      588:  228:	} else if (fl & PAD_POS) {
      123:  229:		prefix+=6;
      465:  230:	} else prefix++, pl=0;
        -:  231:
      700:  232:	if (!isfinite(y)) {
    #####:  233:		char *s = (t&32)?"inf":"INF";
    #####:  234:		if (y!=y) s=(t&32)?"nan":"NAN", pl=0;
    #####:  235:		pad(f, ' ', w, 3+pl, fl&~ZERO_PAD);
    #####:  236:		out(f, prefix, pl);
    #####:  237:		out(f, s, 3);
    #####:  238:		pad(f, ' ', w, 3+pl, fl^LEFT_ADJ);
    #####:  239:		return MAX(w, 3+pl);
        -:  240:	}
        -:  241:
      700:  242:	y = frexpl(y, &e2) * 2;
      700:  243:	if (y) e2--;
        -:  244:
      700:  245:	if ((t|32)=='a') {
      200:  246:		long double round = 8.0;
        -:  247:		int re;
        -:  248:
      200:  249:		if (t&32) prefix += 9;
      200:  250:		pl += 2;
        -:  251:
      200:  252:		if (p<0 || p>=LDBL_MANT_DIG/4-1) re=0;
        2:  253:		else re=LDBL_MANT_DIG/4-1-p;
        -:  254:
      200:  255:		if (re) {
        2:  256:			while (re--) round*=16;
        2:  257:			if (*prefix=='-') {
    #####:  258:				y=-y;
    #####:  259:				y-=round;
    #####:  260:				y+=round;
    #####:  261:				y=-y;
        -:  262:			} else {
        2:  263:				y+=round;
        2:  264:				y-=round;
        -:  265:			}
        -:  266:		}
        -:  267:
      200:  268:		estr=fmt_u(e2<0 ? -e2 : e2, ebuf);
      200:  269:		if (estr==ebuf) *--estr='0';
      200:  270:		*--estr = (e2<0 ? '-' : '+');
      200:  271:		*--estr = t+('p'-'a');
        -:  272:
      200:  273:		s=buf;
        -:  274:		do {
     3058:  275:			int x=y;
     3058:  276:			*s++=xdigits[x]|(t&32);
     3058:  277:			y=16*(y-x);
     3058:  278:			if (s-buf==1 && (y||p>0||(fl&ALT_FORM))) *s++='.';
     3058:  279:		} while (y);
        -:  280:
      200:  281:		if (p && s-buf-2 < p)
      127:  282:			l = (p+2) + (ebuf-estr);
        -:  283:		else
       73:  284:			l = (s-buf) + (ebuf-estr);
        -:  285:
      200:  286:		pad(f, ' ', w, pl+l, fl);
      200:  287:		out(f, prefix, pl);
      200:  288:		pad(f, '0', w, pl+l, fl^ZERO_PAD);
      200:  289:		out(f, buf, s-buf);
      200:  290:		pad(f, '0', l-(ebuf-estr)-(s-buf), 0, 0);
      200:  291:		out(f, estr, ebuf-estr);
      200:  292:		pad(f, ' ', w, pl+l, fl^LEFT_ADJ);
      200:  293:		return MAX(w, pl+l);
        -:  294:	}
      500:  295:	if (p<0) p=6;
        -:  296:
      500:  297:	if (y) y *= 0x1p28, e2-=28;
        -:  298:
      500:  299:	if (e2<0) a=r=z=big;
    #####:  300:	else a=r=z=big+sizeof(big)/sizeof(*big) - LDBL_MANT_DIG - 1;
        -:  301:
        -:  302:	do {
     2237:  303:		*z = y;
     2237:  304:		y = 1000000000*(y-*z++);
     2237:  305:	} while (y);
        -:  306:
     1000:  307:	while (e2>0) {
    #####:  308:		uint32_t carry=0;
    #####:  309:		int sh=MIN(29,e2);
    #####:  310:		for (d=z-1; d>=a; d--) {
    #####:  311:			uint64_t x = ((uint64_t)*d<<sh)+carry;
    #####:  312:			*d = x % 1000000000;
    #####:  313:			carry = x / 1000000000;
        -:  314:		}
    #####:  315:		if (!z[-1] && z>a) z--;
    #####:  316:		if (carry) *--a = carry;
    #####:  317:		e2-=sh;
        -:  318:	}
     3001:  319:	while (e2<0) {
     2001:  320:		uint32_t carry=0, *b;
     2001:  321:		int sh=MIN(9,-e2), need=1+(p+LDBL_MANT_DIG/3+8)/9;
    12648:  322:		for (d=a; d<z; d++) {
    10647:  323:			uint32_t rm = *d & (1<<sh)-1;
    10647:  324:			*d = (*d>>sh) + carry;
    10647:  325:			carry = (1000000000>>sh) * rm;
        -:  326:		}
     2001:  327:		if (!*a) a++;
     2001:  328:		if (carry) *z++ = carry;
        -:  329:		/* Avoid (slow!) computation past requested precision */
     2001:  330:		b = (t|32)=='f' ? r : a;
     2001:  331:		if (z-b > need) z = b+need;
     2001:  332:		e2+=sh;
        -:  333:	}
        -:  334:
      500:  335:	if (a<z) for (i=10, e=9*(r-a); *a>=i; i*=10, e++);
    #####:  336:	else e=0;
        -:  337:
        -:  338:	/* Perform rounding: j is precision after the radix (possibly neg) */
      500:  339:	j = p - ((t|32)!='f')*e - ((t|32)=='g' && p);
      500:  340:	if (j < 9*(z-r-1)) {
        -:  341:		uint32_t x;
        -:  342:		/* We avoid C's broken division of negative numbers */
      189:  343:		d = r + 1 + ((j+9*LDBL_MAX_EXP)/9 - LDBL_MAX_EXP);
      189:  344:		j += 9*LDBL_MAX_EXP;
      189:  345:		j %= 9;
      189:  346:		for (i=10, j++; j<9; i*=10, j++);
      189:  347:		x = *d % i;
        -:  348:		/* Are there any significant digits past j? */
      189:  349:		if (x || d+1!=z) {
      188:  350:			long double round = CONCAT(0x1p,LDBL_MANT_DIG);
        -:  351:			long double small;
      188:  352:			if (*d/i & 1) round += 2;
      188:  353:			if (x<i/2) small=0x0.8p0;
       92:  354:			else if (x==i/2 && d+1==z) small=0x1.0p0;
       91:  355:			else small=0x1.8p0;
      188:  356:			if (pl && *prefix=='-') round*=-1, small*=-1;
      188:  357:			*d -= x;
        -:  358:			/* Decide whether to round by probing round+small */
      188:  359:			if (round+small != round) {
       91:  360:				*d = *d + i;
      182:  361:				while (*d > 999999999) {
    #####:  362:					*d--=0;
    #####:  363:					(*d)++;
        -:  364:				}
       91:  365:				if (d<a) a=d;
       91:  366:				for (i=10, e=9*(r-a); *a>=i; i*=10, e++);
        -:  367:			}
        -:  368:		}
      189:  369:		if (z>d+1) z=d+1;
      189:  370:		for (; !z[-1] && z>a; z--);
        -:  371:	}
        -:  372:	
      500:  373:	if ((t|32)=='g') {
      200:  374:		if (!p) p++;
      200:  375:		if (p>e && e>=-4) {
      200:  376:			t--;
      200:  377:			p-=e+1;
        -:  378:		} else {
    #####:  379:			t-=2;
    #####:  380:			p--;
        -:  381:		}
      200:  382:		if (!(fl&ALT_FORM)) {
        -:  383:			/* Count trailing zeros in last place */
      169:  384:			if (z>a && z[-1]) for (i=10, j=0; z[-1]%i==0; i*=10, j++);
    #####:  385:			else j=9;
      169:  386:			if ((t|32)=='f')
      169:  387:				p = MIN(p,MAX(0,9*(z-r-1)-j));
        -:  388:			else
    #####:  389:				p = MIN(p,MAX(0,9*(z-r-1)+e-j));
        -:  390:		}
        -:  391:	}
      500:  392:	l = 1 + p + (p || (fl&ALT_FORM));
      500:  393:	if ((t|32)=='f') {
      300:  394:		if (e>0) l+=e;
        -:  395:	} else {
      200:  396:		estr=fmt_u(e<0 ? -e : e, ebuf);
      200:  397:		while(ebuf-estr<2) *--estr='0';
      200:  398:		*--estr = (e<0 ? '-' : '+');
      200:  399:		*--estr = t;
      200:  400:		l += ebuf-estr;
        -:  401:	}
        -:  402:
      500:  403:	pad(f, ' ', w, pl+l, fl);
      500:  404:	out(f, prefix, pl);
      500:  405:	pad(f, '0', w, pl+l, fl^ZERO_PAD);
        -:  406:
      500:  407:	if ((t|32)=='f') {
      300:  408:		if (a>r) a=r;
      600:  409:		for (d=a; d<=r; d++) {
      300:  410:			char *s = fmt_u(*d, buf+9);
      300:  411:			if (d!=a) while (s>buf) *--s='0';
      300:  412:			else if (s==buf+9) *--s='0';
      300:  413:			out(f, s, buf+9-s);
        -:  414:		}
      300:  415:		if (p || (fl&ALT_FORM)) out(f, ".", 1);
     1672:  416:		for (; d<z && p>0; d++, p-=9) {
     1372:  417:			char *s = fmt_u(*d, buf+9);
     1372:  418:			while (s>buf) *--s='0';
     1372:  419:			out(f, s, MIN(9,p));
        -:  420:		}
      300:  421:		pad(f, '0', p+9, 9, 0);
        -:  422:	} else {
      200:  423:		if (z<=a) z=a+1;
     1186:  424:		for (d=a; d<z && p>=0; d++) {
      986:  425:			char *s = fmt_u(*d, buf+9);
      986:  426:			if (s==buf+9) *--s='0';
      986:  427:			if (d!=a) while (s>buf) *--s='0';
        -:  428:			else {
      200:  429:				out(f, s++, 1);
      200:  430:				if (p>0||(fl&ALT_FORM)) out(f, ".", 1);
        -:  431:			}
      986:  432:			out(f, s, MIN(buf+9-s, p));
      986:  433:			p -= buf+9-s;
        -:  434:		}
      200:  435:		pad(f, '0', p+18, 18, 0);
      200:  436:		out(f, estr, ebuf-estr);
        -:  437:	}
        -:  438:
      500:  439:	pad(f, ' ', w, pl+l, fl^LEFT_ADJ);
        -:  440:
      500:  441:	return MAX(w, pl+l);
        -:  442:}
        -:  443:
     3690:  444:static int getint(char **s) {
        -:  445:	int i;
    15852:  446:	for (i=0; isdigit(**s); (*s)++)
    12162:  447:		i = 10*i + (**s-'0');
     3690:  448:	return i;
        -:  449:}
        -:  450:
     3000:  451:static int printf_core(MUSL_FILE *f, const char *fmt, va_list *ap, union arg *nl_arg, int *nl_type)
        -:  452:{
     3000:  453:	char *a, *z, *s=(char *)fmt;
     3000:  454:	unsigned l10n=0, fl;
        -:  455:	int w, p;
        -:  456:	union arg arg;
        -:  457:	int argpos;
        -:  458:	unsigned st, ps;
     3000:  459:	int cnt=0, l=0;
        -:  460:	int i;
        -:  461:	char buf[sizeof(uintmax_t)*3+3+LDBL_MANT_DIG/4];
        -:  462:	const char *prefix;
        -:  463:	int t, pl;
        -:  464:	wchar_t wc[2], *ws;
        -:  465:	char mb[4];
        -:  466:
        -:  467:	for (;;) {
        -:  468:		/* Update output count, end loop when fmt is exhausted */
     4403:  469:		if (cnt >= 0) {
     4403:  470:			if (l > INT_MAX - cnt) {
    #####:  471:				errno = EOVERFLOW;
    #####:  472:				cnt = -1;
     4403:  473:			} else cnt += l;
        -:  474:		}
     4403:  475:		if (!*s) break;
        -:  476:
        -:  477:		/* Handle literal text and %% format specifiers */
     3000:  478:		for (a=s; *s && *s!='%'; s++);
     3000:  479:		for (z=s; s[0]=='%' && s[1]=='%'; z++, s+=2);
     3000:  480:		l = z-a;
     3000:  481:		if (f) out(f, a, l);
     3000:  482:		if (l) continue;
        -:  483:
     3000:  484:		if (isdigit(s[1]) && s[2]=='$') {
    #####:  485:			l10n=1;
    #####:  486:			argpos = s[1]-'0';
    #####:  487:			s+=3;
        -:  488:		} else {
     3000:  489:			argpos = -1;
     3000:  490:			s++;
        -:  491:		}
        -:  492:
        -:  493:		/* Read modifier flags */
     5022:  494:		for (fl=0; (unsigned)*s-' '<32 && (FLAGMASK&(1U<<*s-' ')); s++)
     2022:  495:			fl |= 1U<<*s-' ';
        -:  496:
        -:  497:		/* Read field width */
     3000:  498:		if (*s=='*') {
      104:  499:			if (isdigit(s[1]) && s[2]=='$') {
    #####:  500:				l10n=1;
    #####:  501:				nl_type[s[1]-'0'] = INT;
    #####:  502:				w = nl_arg[s[1]-'0'].i;
    #####:  503:				s+=3;
      104:  504:			} else if (!l10n) {
      104:  505:				w = f ? va_arg(*ap, int) : 0;
      104:  506:				s++;
    #####:  507:			} else return -1;
      104:  508:			if (w<0) fl|=LEFT_ADJ, w=-w;
     2896:  509:		} else if ((w=getint(&s))<0) return -1;
        -:  510:
        -:  511:		/* Read precision */
     3000:  512:		if (*s=='.' && s[1]=='*') {
     1632:  513:			if (isdigit(s[2]) && s[3]=='$') {
    #####:  514:				nl_type[s[2]-'0'] = INT;
    #####:  515:				p = nl_arg[s[2]-'0'].i;
    #####:  516:				s+=4;
      816:  517:			} else if (!l10n) {
      816:  518:				p = f ? va_arg(*ap, int) : 0;
      816:  519:				s+=2;
    #####:  520:			} else return -1;
     2184:  521:		} else if (*s=='.') {
      794:  522:			s++;
      794:  523:			p = getint(&s);
     1390:  524:		} else p = -1;
        -:  525:
        -:  526:		/* Format specifier state machine */
     3000:  527:		st=0;
        -:  528:		do {
     4618:  529:			if (OOB(*s)) return -1;
     4618:  530:			ps=st;
     4618:  531:			st=states[st]S(*s++);
     4618:  532:		} while (st-1<STOP);
     3000:  533:		if (!st) return -1;
        -:  534:
        -:  535:		/* Check validity of argument type (nl/normal) */
     3000:  536:		if (st==NOARG) {
    #####:  537:			if (argpos>=0) return -1;
        -:  538:		} else {
     3000:  539:			if (argpos>=0) nl_type[argpos]=st, arg=nl_arg[argpos];
     3000:  540:			else if (f) pop_arg(&arg, st, ap);
     1500:  541:			else return 0;
        -:  542:		}
        -:  543:
     1500:  544:		if (!f) continue;
        -:  545:
     1500:  546:		z = buf + sizeof(buf);
     1500:  547:		prefix = "-+   0X0x";
     1500:  548:		pl = 0;
     1500:  549:		t = s[-1];
        -:  550:
        -:  551:		/* Transform ls,lc -> S,C */
     1500:  552:		if (ps && (t&15)==3) t&=~32;
        -:  553:
        -:  554:		/* - and 0 flags are mutually exclusive */
     1500:  555:		if (fl & LEFT_ADJ) fl &= ~ZERO_PAD;
        -:  556:
     1500:  557:		switch(t) {
        -:  558:		case 'n':
      100:  559:			switch(ps) {
       29:  560:			case BARE: *(int *)arg.p = cnt; break;
       33:  561:			case LPRE: *(long *)arg.p = cnt; break;
    #####:  562:			case LLPRE: *(long long *)arg.p = cnt; break;
       38:  563:			case HPRE: *(unsigned short *)arg.p = cnt; break;
    #####:  564:			case HHPRE: *(unsigned char *)arg.p = cnt; break;
    #####:  565:			case ZTPRE: *(size_t *)arg.p = cnt; break;
    #####:  566:			case JPRE: *(uintmax_t *)arg.p = cnt; break;
        -:  567:			}
      100:  568:			continue;
        -:  569:		case 'p':
      100:  570:			p = MAX(p, 2*sizeof(void*));
      100:  571:			t = 'x';
      100:  572:			fl |= ALT_FORM;
        -:  573:		case 'x': case 'X':
      200:  574:			a = fmt_x(arg.i, z, t&32);
      200:  575:			if (arg.i && (fl & ALT_FORM)) prefix+=(t>>4), pl=2;
        -:  576:			if (0) {
        -:  577:		case 'o':
      100:  578:			a = fmt_o(arg.i, z);
      100:  579:			if ((fl&ALT_FORM) && arg.i) prefix+=5, pl=1;
        -:  580:			} if (0) {
        -:  581:		case 'd': case 'i':
      100:  582:			pl=1;
      100:  583:			if (arg.i>INTMAX_MAX) {
    #####:  584:				arg.i=-arg.i;
      100:  585:			} else if (fl & MARK_POS) {
       28:  586:				prefix++;
       72:  587:			} else if (fl & PAD_POS) {
       24:  588:				prefix+=2;
       48:  589:			} else pl=0;
        -:  590:		case 'u':
      200:  591:			a = fmt_u(arg.i, z);
        -:  592:			}
      500:  593:			if (p>=0) fl &= ~ZERO_PAD;
      500:  594:			if (!arg.i && !p) {
    #####:  595:				a=z;
    #####:  596:				break;
        -:  597:			}
      500:  598:			p = MAX(p, z-a + !arg.i);
      500:  599:			break;
        -:  600:		case 'c':
       50:  601:			*(a=z-(p=1))=arg.i;
       50:  602:			fl &= ~ZERO_PAD;
       50:  603:			break;
        -:  604:		case 'm':
    #####:  605:			if (1) a = strerror(errno); else
        -:  606:		case 's':
       44:  607:			a = arg.p ? arg.p : "(null)";
       44:  608:			z = memchr(a, 0, p);
       44:  609:			if (!z) z=a+p;
       43:  610:			else p=z-a;
       44:  611:			fl &= ~ZERO_PAD;
       44:  612:			break;
        -:  613:		case 'C':
       50:  614:			wc[0] = arg.i;
       50:  615:			wc[1] = 0;
       50:  616:			arg.p = wc;
       50:  617:			p = -1;
        -:  618:		case 'S':
      106:  619:			ws = arg.p;
      106:  620:			for (i=l=0; i<0U+p && *ws && (l=wctomb(mb, *ws++))>=0 && l<=0U+p-i; i+=l);
      106:  621:			if (l<0) return -1;
        9:  622:			p = i;
        9:  623:			pad(f, ' ', w, p, fl);
        9:  624:			ws = arg.p;
       18:  625:			for (i=0; i<0U+p && *ws && i+(l=wctomb(mb, *ws++))<=p; i+=l)
        9:  626:				out(f, mb, l);
        9:  627:			pad(f, ' ', w, p, fl^LEFT_ADJ);
        9:  628:			l = w>p ? w : p;
        9:  629:			continue;
        -:  630:		case 'e': case 'f': case 'g': case 'a':
        -:  631:		case 'E': case 'F': case 'G': case 'A':
      700:  632:			l = fmt_fp(f, arg.f, w, p, fl, t);
      700:  633:			continue;
        -:  634:		}
        -:  635:
      594:  636:		if (p < z-a) p = z-a;
      594:  637:		if (w < pl+p) w = pl+p;
        -:  638:
      594:  639:		pad(f, ' ', w, pl+p, fl);
      594:  640:		out(f, prefix, pl);
      594:  641:		pad(f, '0', w, pl+p, fl^ZERO_PAD);
      594:  642:		pad(f, '0', p, z-a, 0);
      594:  643:		out(f, a, z-a);
      594:  644:		pad(f, ' ', w, pl+p, fl^LEFT_ADJ);
        -:  645:
      594:  646:		l = w;
     1403:  647:	}
        -:  648:
     1403:  649:	if (f) return cnt;
    #####:  650:	if (!l10n) return 0;
        -:  651:
    #####:  652:	for (i=1; i<=NL_ARGMAX && nl_type[i]; i++)
    #####:  653:		pop_arg(nl_arg+i, nl_type[i], ap);
    #####:  654:	for (; i<=NL_ARGMAX && !nl_type[i]; i++);
    #####:  655:	if (i<=NL_ARGMAX) return -1;
    #####:  656:	return 1;
        -:  657:}
        -:  658:
     1500:  659:int musl_vfprintf(MUSL_FILE *restrict f, const char *restrict fmt, va_list ap)
        -:  660:{
        -:  661:	va_list ap2;
     1500:  662:	int nl_type[NL_ARGMAX+1] = {0};
        -:  663:	union arg nl_arg[NL_ARGMAX+1];
     1500:  664:	unsigned char internal_buf[80], *saved_buf = 0;
        -:  665:	int ret;
        -:  666:
        -:  667:	/* the copy allows passing va_list* even if va_list is an array */
     1500:  668:	va_copy(ap2, ap);
     1500:  669:	if (printf_core(0, fmt, &ap2, nl_arg, nl_type) < 0) {
    #####:  670:		va_end(ap2);
    #####:  671:		return -1;
        -:  672:	}
        -:  673:
        -:  674:	// FLOCK(f);
     1500:  675:	if (!f->buf_size) {
    #####:  676:		saved_buf = f->buf;
    #####:  677:		f->wpos = f->wbase = f->buf = internal_buf;
    #####:  678:		f->buf_size = sizeof internal_buf;
    #####:  679:		f->wend = internal_buf + sizeof internal_buf;
        -:  680:	}
     1500:  681:	ret = printf_core(f, fmt, &ap2, nl_arg, nl_type);
     1500:  682:	if (saved_buf) {
    #####:  683:		f->write(f, 0, 0);
    #####:  684:		if (!f->wpos) ret = -1;
    #####:  685:		f->buf = saved_buf;
    #####:  686:		f->buf_size = 0;
    #####:  687:		f->wpos = f->wbase = f->wend = 0;
        -:  688:	}
        -:  689:	// FUNLOCK(f);
     1500:  690:	va_end(ap2);
     1500:  691:	return ret;
        -:  692:}
