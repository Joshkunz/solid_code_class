#! /usr/bin/env racket
#lang racket

(require "term-colors.rkt")
(require "common.rkt")
(require "proc.rkt")
(require "printf.rkt")

; **** Printers ****

(define printf-fail 
 (make-printfs (make-color 'red)))

(define printf-succ
 (make-printfs (make-color 'green)))

; Returns an iterator that can be supplied to build for the given 
; proc's stdout.
(define (in-stdout proc)
 (list (hash-ref proc 'stdout))
)

(define (fuzz trial-count [iter-count 0])
 (build "test.c" (printf-stream trial-count #t))
 (when (ormap (lambda (x) (not (= x 0))) (list
        (system/exit-code "make test-musl") 
        (system/exit-code "make test-local")))
  (printf-fail "Failed to compile a test script.\n")
  (exit 1))
 (build "musl.out" (in-stdout (run "./test-musl")))
 (build "local.out" (in-stdout (run "./test-local")))

 (if (not (eq? (system/exit-code "diff musl.out local.out") 0))
  (begin
   (printf-fail "[~a] Had differing output.\n" iter-count)
   (copy-file "test.c" (format "~a-test.c" iter-count))
   (copy-file "musl.out" (format "~a-musl.out" iter-count))
   (copy-file "local.out" (format "~a-local.out" iter-count))
  )
  (printf-succ "[~a] OK.\n" iter-count)
 )
 (fuzz trial-count (add1 iter-count)))

(sequence-for-each display (printf-stream 10 #t))

;(fuzz 1000)

; vim: set syn=scheme:
