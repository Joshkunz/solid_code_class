#! /usr/bin/env racket
#lang racket

(require "term-colors.rkt")
(require "common.rkt")
(require "proc.rkt")
(require "printf.rkt")

; **** Printers ****

(define printf-fail 
 (make-printfs (make-color 'red)))

(define printf-succ
 (make-printfs (make-color 'green)))

; Returns an iterator that can be supplied to build for the given 
; proc's stdout.
(define (in-stdout proc)
 (list (hash-ref proc 'stdout))
)

(define (fuzz trial-count [iter-count 0])
 (build "test.c" (printf-stream trial-count #t))
 (when (not (= 0 (system/exit-code "make both-files -j2 --quiet 2> /dev/null")))
  (printf-fail "Failed to compile a test binary.\n")
  (exit 1))
 (printf "[I: ~a] " iter-count)
 (if (not (eq? (system/exit-code "diff musl.out local.out > /dev/null") 0))
  (begin
   (printf-fail "Output Differs.\n")
   (copy-file "test.c" (format "test-~a.c" iter-count)))
  (printf-succ "OK.\n")
 )
 (fuzz trial-count (add1 iter-count)))

;(sequence-for-each display (printf-stream 100 #t))
(with-handlers ([exn:break? (thunk* (display "\n"))]) (fuzz 1000))

; vim: set syn=scheme:
