        -:    0:Source:vsnprintf.c
        -:    0:Graph:vsnprintf.gcno
        -:    0:Data:vsnprintf.gcda
        -:    0:Runs:159
        -:    0:Programs:1
        -:    1:#include "musl.h"
        -:    2:#include <limits.h>
        -:    3:#include <string.h>
        -:    4:#include <errno.h>
        -:    5:#include <stdint.h>
        -:    6:
        -:    7:static size_t sn_write(MUSL_FILE *f, const unsigned char *s, size_t l)
        -:    8:{
       14:    9:	size_t k = f->wend - f->wpos;
       14:   10:	if (k > l) k = l;
       14:   11:	memcpy(f->wpos, s, k);
       14:   12:	f->wpos += k;
        -:   13:	/* pretend to succeed, but discard extra data */
       14:   14:	return l;
        -:   15:}
        -:   16:
        -:   17:int musl_vsnprintf(char *restrict s, size_t n, const char *restrict fmt, va_list ap)
        -:   18:{
        -:   19:	int r;
        -:   20:	char b;
   161793:   21:	MUSL_FILE f = { .lbf = EOF, .write = sn_write, .lock = -1 };
        -:   22:
   161793:   23:	if (n-1 > INT_MAX-1) {
    #####:   24:		if (n) {
    #####:   25:			errno = EOVERFLOW;
    #####:   26:			return -1;
        -:   27:		}
    #####:   28:		s = &b;
    #####:   29:		n = 1;
    #####:   30:	}
        -:   31:
        -:   32:	/* Ensure pointers don't wrap if "infinite" n is passed in */
   161793:   33:	if (n > (char *)0+SIZE_MAX-s-1) n = (char *)0+SIZE_MAX-s-1;
   161793:   34:	f.buf_size = n;
   161793:   35:	f.buf = f.wpos = (void *)s;
   161793:   36:	f.wbase = f.wend = (void *)(s+n);
   161793:   37:	r = musl_vfprintf(&f, fmt, ap);
        -:   38:
        -:   39:	/* Null-terminate, overwriting last char if dest buffer is full */
   323586:   40:	if (n) f.wpos[-(f.wpos == f.wend)] = 0;
   161793:   41:	return r;
   161793:   42:}
