        -:    0:Source:triangle.c
        -:    0:Graph:triangle.gcno
        -:    0:Data:triangle.gcda
        -:    0:Runs:31
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <math.h>
        -:    3:#include <stdbool.h>
        -:    4:#define error 0.00001
        -:    5:
        -:    6:
function isEqual called 317 returned 100% blocks executed 100%
      317:    7:bool isEqual(double d1, double d2)
        -:    8:{ 
      317:    9:  if(fabs(d1-d2) < error)
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
        -:   10:    {
       48:   11:      return true;
        -:   12:    }
      269:   13:  return false;
        -:   14:}
        -:   15:
        -:   16:
function lengthOfSide called 69 returned 100% blocks executed 100%
       69:   17:double lengthOfSide(double x1, double y1, double x2, double y2)
        -:   18:{
        -:   19:  // distance formula 
        -:   20:  double ret;
        -:   21:  double p1, p2;
       69:   22:  p1 = pow((x2-x1), 2);
       69:   23:  p2 = pow((y2-y1), 2);  
       69:   24:  ret = sqrt(p1+p2); 
       69:   25:  return ret;	
        -:   26:   
        -:   27:}
        -:   28:
function angleBetween called 69 returned 100% blocks executed 100%
       69:   29:double angleBetween(double s1, double s2, double s3)
        -:   30:{
       69:   31:  double angle = acos((pow(s1, 2)+pow(s2, 2)-pow(s3, 2))/ (pow(s1, 2)*pow(s2, 2)));
       69:   32:  angle = 180*angle/M_PI;
       69:   33: return angle;  
        -:   34:}
        -:   35:
function isRight called 23 returned 100% blocks executed 100%
       23:   36:bool isRight(double a1, double a2, double a3)
        -:   37:{
       37:   38:  if((isEqual(a1,90) && a2 < 90 && a3 < 90) ||
call    0 returned 100%
branch  1 taken 13% (fallthrough)
branch  2 taken 87%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 0% (fallthrough)
branch  6 taken 100%
call    7 returned 100%
branch  8 taken 30% (fallthrough)
branch  9 taken 70%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
branch 12 taken 0% (fallthrough)
branch 13 taken 100%
call   14 returned 100%
branch 15 taken 7% (fallthrough)
branch 16 taken 93%
branch 17 taken 100% (fallthrough)
branch 18 taken 0%
branch 19 taken 100% (fallthrough)
branch 20 taken 0%
       12:   39:     (isEqual(a2,90) && a1 < 90 && a3 < 90) ||
        2:   40:     (isEqual(a3,90) && a1 < 90 && a2 < 90))
        -:   41:    {
       10:   42:      return true;
        -:   43:    }
       13:   44:  return false;
        -:   45:}
        -:   46:
function isObtuse called 23 returned 100% blocks executed 100%
       23:   47:bool isObtuse(double a1, double a2, double a3)
        -:   48:{
       70:   49:  if((a1 > 90 && a2 < 90 && a3 < 90) ||
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 taken 5% (fallthrough)
branch  7 taken 95%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
branch 12 taken 22% (fallthrough)
branch 13 taken 78%
branch 14 taken 100% (fallthrough)
branch 15 taken 0%
branch 16 taken 100% (fallthrough)
branch 17 taken 0%
       21:   50:     (a2 > 90 && a1 < 90 && a3 < 90) ||
       26:   51:     (a3 > 90 && a1 < 90 && a2 < 90))
        -:   52:    {
        9:   53:      return true;
        -:   54:    }
       14:   55:  return false;
        -:   56:}
        -:   57:
function isAcute called 23 returned 100% blocks executed 100%
       23:   58:bool isAcute(double a1, double a2, double a3)
        -:   59:{
       95:   60:  if((a1 < 90 && a2 < 90 && a3 < 90) ||
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
branch  2 taken 63% (fallthrough)
branch  3 taken 38%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
branch  6 taken 67% (fallthrough)
branch  7 taken 33%
branch  8 taken 42% (fallthrough)
branch  9 taken 58%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
branch 12 taken 72% (fallthrough)
branch 13 taken 28%
branch 14 taken 46% (fallthrough)
branch 15 taken 54%
branch 16 taken 0% (fallthrough)
branch 17 taken 100%
       35:   61:     (a2 < 90 && a1 < 90 && a3 < 90) ||
       37:   62:     (a3 < 90 && a1 < 90 && a2 < 90))
        -:   63:    {
        5:   64:      return true;
        -:   65:    }
       18:   66:  return false;
        -:   67:}
        -:   68:
function isEquilateral called 23 returned 100% blocks executed 67%
       23:   69:bool isEquilateral(double s1, double s2, double s3)
        -:   70:{
       23:   71:  if(isEqual(s1,s2) && isEqual(s1,s3) && isEqual(s2,s3))
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:   72:    {
    #####:   73:      return true;
        -:   74:    }
       23:   75:  return false;
        -:   76:}
        -:   77:
function isIsosceles called 23 returned 100% blocks executed 78%
       23:   78:bool isIsosceles(double s1, double s2, double s3)
        -:   79:{
       23:   80:  if(isEqual(s1,s2) && !isEqual(s2,s3) && !isEqual(s1,s3))
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
        -:   81:    {
        1:   82:      return true;
        -:   83:    }
       22:   84:  else if(isEqual(s1,s3) && !isEqual(s3,s2) && !isEqual(s1,s2))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:   85:    {
    #####:   86:      return true;
        -:   87:    }
       22:   88:  else if(isEqual(s2,s3) && !isEqual(s3,s1) && !isEqual(s2,s1))
call    0 returned 100%
branch  1 taken 18% (fallthrough)
branch  2 taken 82%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
        -:   89:    {
        4:   90:      return true;
        -:   91:    }
        -:   92:  else
        -:   93:    {
       18:   94:      return false;
        -:   95:    }
        -:   96:}
        -:   97:
function isScalene called 23 returned 100% blocks executed 100%
       23:   98:bool isScalene(double s1, double s2, double s3)
        -:   99:{
       23:  100:  if(!isEqual(s1, s2) && !isEqual(s2, s3) && !isEqual(s1, s3))
call    0 returned 100%
branch  1 taken 96% (fallthrough)
branch  2 taken 4%
call    3 returned 100%
branch  4 taken 82% (fallthrough)
branch  5 taken 18%
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0%
        -:  101:    {
       18:  102:      return true;
        -:  103:    }
        5:  104:  return false;
        -:  105:}
        -:  106:
        -:  107:
function main called 31 returned 100% blocks executed 72%
       31:  108:int main(int argc, char **argv)
        -:  109:{  
        -:  110:  double xpoints[3];
        -:  111:  double ypoints[3];
        -:  112:  double s1, s2, s3, a1, a2, a3;
        -:  113:  bool scal, iso, equi, acute, obtuse, right; 
        -:  114:
        -:  115:
        -:  116:  // get command line arguments
       31:  117:  if(argc < 7)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  118:    {
    #####:  119:      printf("invalid number of coordinates\n");
call    0 never executed
        -:  120:    }
        -:  121:  else
        -:  122:    {
       31:  123:      xpoints[0] = atoi(argv[1]);
call    0 returned 100%
       31:  124:      ypoints[0] = atoi(argv[2]);
call    0 returned 100%
       31:  125:      xpoints[1] = atoi(argv[3]);
call    0 returned 100%
       31:  126:      ypoints[1] = atoi(argv[4]);
call    0 returned 100%
       31:  127:      xpoints[2] = atoi(argv[5]);
call    0 returned 100%
       31:  128:      ypoints[2] = atoi(argv[6]);      
call    0 returned 100%
        -:  129:    }
        -:  130:  
        -:  131:  // check for nat  
       31:  132:  if(isEqual(xpoints[0], xpoints[1]) && isEqual(ypoints[0], ypoints[1]))
call    0 returned 100%
branch  1 taken 58% (fallthrough)
branch  2 taken 42%
call    3 returned 100%
branch  4 taken 44% (fallthrough)
branch  5 taken 56%
        -:  133:    {
        8:  134:      printf("not a triangle\n");
call    0 returned 100%
        8:  135:      return 0;
        -:  136:    }
       23:  137:   if(isEqual(xpoints[0], xpoints[2]) && isEqual(ypoints[0], ypoints[2]))
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
call    3 returned 100%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  138:    {
    #####:  139:      printf("not a triangle\n");
call    0 never executed
    #####:  140:      return 0;
        -:  141:    }
       23:  142:    if(isEqual(xpoints[2], xpoints[1]) && isEqual(ypoints[2], ypoints[1]))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  143:    {
    #####:  144:      printf("not a triangle\n");
call    0 never executed
    #####:  145:      return 0;
        -:  146:      }  
        -:  147:  
        -:  148:     //scal, iso, equi, acute, obtuse, right
        -:  149:
       23:  150:  s1 = lengthOfSide(xpoints[0], ypoints[0], xpoints[1], ypoints[1]);
call    0 returned 100%
       23:  151:  s2 = lengthOfSide(xpoints[2], ypoints[2], xpoints[1], ypoints[1]);
call    0 returned 100%
       23:  152:  s3 = lengthOfSide(xpoints[2], ypoints[2], xpoints[0], ypoints[0]); 
call    0 returned 100%
        -:  153: 
       23:  154:  scal = isScalene(s1, s2, s3);
call    0 returned 100%
       23:  155:  iso = isIsosceles(s1, s2, s3);
call    0 returned 100%
       23:  156:  equi = isEquilateral(s1, s2, s3);
call    0 returned 100%
        -:  157:
       23:  158:  a3 = angleBetween(s1, s2, s3);
call    0 returned 100%
       23:  159:  a2 = angleBetween(s1, s3, s2);
call    0 returned 100%
       23:  160:  a1 = angleBetween(s2, s3, s1);
call    0 returned 100%
        -:  161:
       23:  162:  acute = isAcute(a1, a2, a3);
call    0 returned 100%
       23:  163:  obtuse = isObtuse(a1, a2, a3);
call    0 returned 100%
       23:  164:  right = isRight(a1, a2, a3);
call    0 returned 100%
        -:  165:  
        -:  166:  // (((scalene|isosceles|equilateral) (acute|obtuse|right))|not a triangle)
       27:  167:  if(scal && acute)
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
branch  2 taken 22% (fallthrough)
branch  3 taken 78%
        -:  168:    {
        4:  169:      printf("scalene acute\n");
call    0 returned 100%
        -:  170:    }
       28:  171:  else if(scal && obtuse)
branch  0 taken 74% (fallthrough)
branch  1 taken 26%
branch  2 taken 64% (fallthrough)
branch  3 taken 36%
        -:  172:    {
        9:  173:      printf("scalene obtuse\n");
call    0 returned 100%
        -:  174:    }
       15:  175:  else if(scal && right)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  176:    {
        5:  177:      printf("scalene right\n");
call    0 returned 100%
        -:  178:    }
        6:  179:  else if(iso && acute)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 20% (fallthrough)
branch  3 taken 80%
        -:  180:    {
        1:  181:      printf("isosceles acute\n");
call    0 returned 100%
        -:  182:    }
        4:  183:  else if(iso && obtuse)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  184:    {
    #####:  185:      printf("isosceles obtuse\n");
call    0 never executed
        -:  186:    }
        8:  187:  else if(iso && right)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  188:    {
        4:  189:      printf("isosceles right\n");
call    0 returned 100%
        -:  190:    }
    #####:  191:  else if(equi && acute)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  192:    {
    #####:  193:      printf("equilateral acute\n");
call    0 never executed
        -:  194:    }
    #####:  195:  else if(equi && obtuse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  196:    {
    #####:  197:      printf("equilateral obtuse\n");
call    0 never executed
        -:  198:    }
    #####:  199:  else if(equi && right)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  200:    {
    #####:  201:      printf("equilateral right\n");
call    0 never executed
        -:  202:    }
        -:  203:  else
        -:  204:    {
    #####:  205:      printf("not a triangle\n");
call    0 never executed
        -:  206:    } 
        -:  207:
       23:  208:  return 0;
        -:  209:}
        -:  210:
        -:  211:
