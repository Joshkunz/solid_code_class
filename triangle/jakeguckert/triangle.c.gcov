        -:    0:Source:triangle.c
        -:    0:Graph:triangle.gcno
        -:    0:Data:triangle.gcda
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/* Jake Guckert */
        -:    2:
        -:    3:#include <math.h>
        -:    4:#include <stdio.h>
        -:    5:#include <stdlib.h>
        -:    6:
        -:    7:/* given two points, returns the distance between those points. */
function get_side_length called 21 returned 100% blocks executed 0%
        -:    8:float get_side_length(int x0, int y0, int x1, int y1) {
       21:    9:	int temp1 = (x1 - x0) * (x1 - x0);
       21:   10:	int temp2 = (y1 - y0) * (y1 - y0);
       21:   11:	int temp3 = temp1 + temp2;
       21:   12:	float length = sqrt(temp3);
       21:   13:	return length;
        -:   14:}
        -:   15:
        -:   16:/* returns whether the triangle is equilateral, scalene, or isosceles. */
function get_side_classification called 6 returned 100% blocks executed 78%
        -:   17:const char * get_side_classification(float s1, float s2, float s3) {
        7:   18:	if(s1 == s2 && s1 == s3 && s2 == s3) {
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:   19:		return "equilateral";
        -:   20:	}
       14:   21:	if(s1 != s2 && s1 != s3 && s2 != s3) {
branch  0 taken 83%
branch  1 taken 17%
branch  2 taken 60%
branch  3 taken 40%
branch  4 taken 100%
branch  5 taken 0%
        3:   22:		return "scalene";
        -:   23:	}
        3:   24:	return "isosceles";
        6:   25:}
        -:   26:
        -:   27:/* returns whether the triangle is right, obtuse, or acute. */
function get_angle_classification called 6 returned 100% blocks executed 77%
        -:   28:const char * get_angle_classification(float a, float b, float c) {
        6:   29:	float a_squared = a * a;
        6:   30:	float b_squared = b * b;
        6:   31:	float c_squared = c * c;
        -:   32:
        6:   33:	float angle_a = acos((b_squared + c_squared - a_squared) / (2 * b * c));
        6:   34:	angle_a = angle_a * (180 / M_PI);
        6:   35:	float angle_b = acos((c_squared + a_squared - b_squared) / (2 * c * a));
        6:   36:	angle_b = angle_b * (180 / M_PI);
        6:   37:	float angle_c = 180 - (angle_a + angle_b);
        -:   38:
       18:   39:	if(angle_a == 90 || angle_b == 90 || angle_c == 90) {
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 33%
branch  3 taken 67%
        2:   40:		return "right";
        -:   41:	}
       10:   42:	if(angle_a > 90 || angle_b > 90 || angle_c > 90) {
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 50%
branch  3 taken 50%
branch  4 taken 0%
branch  5 taken 100%
        2:   43:		return "obtuse";
        -:   44:	}
        2:   45:	if(angle_a < 90 || angle_b < 90 || angle_c < 90) {
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        2:   46:		return "acute";
        -:   47:	}
    #####:   48:	return "";
        6:   49:}
        -:   50:
        -:   51:/* determines whether the given side lengths make a triangle. */
function is_a_triangle called 7 returned 100% blocks executed 100%
        -:   52:int is_a_triangle(float s1, float s2, float s3) {
        7:   53:	float s1_s2 = s1 + s2;
        7:   54:	float s1_s3 = s1 + s3;
        7:   55:	float s2_s3 = s2 + s3;
        -:   56:
       19:   57:	if((s1_s2 > s3) && (s1_s3 > s2) && (s2_s3 > s1)) {
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 100%
branch  3 taken 0%
        6:   58:		return 1;
        -:   59:	}
        1:   60:	return 0;
        7:   61:}
        -:   62:
function main called 7 returned 86% blocks executed 50%
        -:   63:int main(int argc, char* argv[]) {
        -:   64:	
        7:   65:	int x0 = atoi(argv[1]);
        7:   66:	int y0 = atoi(argv[2]);
        -:   67:
        7:   68:	int x1 = atoi(argv[3]);
        7:   69:	int y1 = atoi(argv[4]);
        -:   70:
        7:   71:	int x2 = atoi(argv[5]);
        7:   72:	int y2 = atoi(argv[6]);
        -:   73:
        7:   74:	float s1 = get_side_length(x0, y0, x1, y1);
        7:   75:	float s2 = get_side_length(x0, y0, x2, y2);
        7:   76:	float s3 = get_side_length(x1, y1, x2, y2);
        -:   77:
        7:   78:	if(!is_a_triangle(s1, s2, s3)) {
    #####:   79:		printf("%s\n", "not a triangle");
    #####:   80:		exit(0);
        -:   81:	}
        -:   82:
        6:   83: 	printf("%s ", get_side_classification(s1, s2, s3));	
        6:   84:	printf("%s\n", get_angle_classification(s1, s2, s3));
        -:   85:	
        6:   86:	return 0;
        -:   87:}